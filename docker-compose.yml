version: "3.8"

services:
  root:
    image: 'bal_root:latest'
    restart: "no"
    command: ["yarn", "install"]
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/app/:z

  reverse_proxy:
    profiles:
      - "dev"
      - "dev-full"
    ports:
      - 80:80
      - 443:443
    networks:
      - bal_network
    environment:
      - PARANOIA=1
      - ANOMALY_INBOUND=5
      - ANOMALY_OUTBOUND=4
      - REPORTING_LEVEL=4
      - DNS_SERVER=127.0.0.11
      - PROXY=1
      - SERVERNAME=localhost
      - LOGLEVEL=warn
      - NGINX_ALWAYS_TLS_REDIRECT=false
      - ALLOWED_METHODS=GET HEAD POST OPTIONS PUT DELETE
    volumes:
      - bal_nginx_data:/data
    build:
      context: reverse_proxy

  ui:
    image: 'bal_root:latest'
    profiles:
      - "dev"
      - "dev-full"
    stdin_open: true
    networks:
      - bal_network
    env_file: .env_ui
    volumes:
      - ./:/app/:z
    working_dir: '/app/ui'
    expose:
      - '3000'
    command: ["yarn", "docker-dev"]
    depends_on:
      root:
        condition: service_completed_successfully

  server:
    image: 'bal_root:latest'
    profiles:
      - "dev"
      - "dev-full"
    networks:
      - bal_network
    depends_on:
      mongodb:
        condition: service_healthy
      smtp:
        condition: service_started
      root:
        condition: service_completed_successfully
    env_file: .env_server
    volumes:
      - ./:/app/:z
      - bal_server_data:/data
    working_dir: '/app/server'
    expose:
      - '5000'
    command: ["yarn", "dev"]

  test:
    image: 'bal_root:latest'
    profiles:
      - "test"
    networks:
      - bal_network
    depends_on:
      mongodb:
        condition: service_healthy
      root:
        condition: service_completed_successfully
    env_file: ./server/.env.test
    volumes:
      - ./:/app/:z
    extra_hosts:
      - host.docker.internal:host-gateway
    working_dir: '/app'
  
  ci:
    image: 'bal_root:latest'
    profiles:
      - "ci"
    networks:
      - bal_network
    env_file: ./server/.env.test
    volumes:
      - ./:/app/:z
      - /app/node_modules
      - /app/server/node_modules
      - /app/shared/node_modules
      - /app/ui/node_modules
    extra_hosts:
      - host.docker.internal:host-gateway
    working_dir: '/app'

  processor:
    image: 'bal_root:latest'
    profiles:
      - "dev"
      - "dev-full"
    command: ["yarn", "cli", "processor"]
    deploy:
      resources:
        limits:
          memory: 2g
    restart: unless-stopped
    networks:
      - bal_network
    env_file: .env_server
    volumes:
      - ./:/app/:z
      - bal_server_data:/data
    depends_on:
      mongodb:
        condition: service_healthy
      clamav:
        condition: service_healthy
      root:
        condition: service_completed_successfully
    working_dir: '/app/server'
    expose:
      - '5000'

  mongodb:
    profiles:
      - "dev"
      - "test"
      - "dev-full"
    image: mongo:6.0.2-focal
    deploy:
      resources:
        limits:
          memory: 2g
    restart: unless-stopped
    ports:
      - "127.0.0.1:27017:27017"
    networks:
      - bal_network
    volumes:
      - bal_mongodb_data:/data
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "'db.runCommand(\"ping\").ok'", '--quiet']
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 10s

  metabase:
    profiles:
      - "dev-full"
    image: metabase/metabase:v0.46.0
    depends_on:
      - mongodb
      - postgres
    restart: unless-stopped
    networks:
      - bal_network
    environment:
      JAVA_TIMEZONE: Europe/Paris
      MB_SITE_LOCALE: fr
      MB_SITE_URL: http://localhost/metabase

      MB_EMAIL_SMTP_HOST: "localhost"
      MB_EMAIL_SMTP_PORT: 1025
      MB_EMAIL_SMTP_PASSWORD: test
      MB_EMAIL_SMTP_SECURITY: none
      MB_EMAIL_SMTP_USERNAME: test

      MB_ENCRYPTION_SECRET_KEY: encryption-key-for-db-credentials
      MB_PASSWORD_COMPLEXITY: strong
      MB_START_OF_WEEK: monday

      MB_DB_TYPE: postgres
      MB_DB_CONNECTION_URI: "jdbc:postgresql://postgres:5432/metabaseappdb?user=metabase&password=password"
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5

  postgres:
    profiles:
      - "dev"
      - "dev-full"
    image: postgres:15-alpine
    restart: unless-stopped
    networks:
      - bal_network
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: metabaseappdb
      POSTGRES_USER: metabase
    volumes:
      - bal_metabase_data:/var/lib/postgresql/data

  clamav:
    profiles:
      - "dev"
      - "dev-full"
    image: clamav/clamav:latest
    restart: unless-stopped
    networks:
      - bal_network
    healthcheck:
      test: ["CMD", "/usr/local/bin/clamdcheck.sh"]
      interval: 60s
      retries: 3
      start_period: 6m
    volumes:
      - bal_clamav_data:/var/lib/clamav
  
  smtp:
    profiles:
      - "dev"
      - "dev-full"
    image: axllent/mailpit:v1.5.5
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - bal_network
    environment:
      - MP_DATA_FILE=/data/mailpit.db
    volumes:
      - bal_smtp_data:/data

volumes:
  bal_mongodb_data:
    driver: local
    name: bal_mongodb_data
  bal_metabase_data:
    driver: local
    name: bal_metabase_data
  bal_nginx_data:
    driver: local
    name: bal_nginx_data
  bal_server_data:
    driver: local
    name: bal_server_data
  bal_smtp_data:
    driver: local
    name: bal_smtp_data
  bal_clamav_data:
    driver: local
    name: bal_clamav_data

networks:
  bal_network:
    name: bal_network
