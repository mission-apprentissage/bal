name: Release version
on:
  push:
    branches: [main, next]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  tests:
    if: "!startsWith(github.event.head_commit.message, 'chore')"
    uses: "./.github/workflows/ci.yml"
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Si une release concurrente a eu lieu, il faut s'assurer de bien merge les changements
  update:
    if: "startsWith(github.event.head_commit.message, 'chore')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_FG_TOKEN }}
          persist-credentials: true

      - name: Git config identity
        run: |
          git config --global user.name "$USER_NAME"
          git config --global user.email "$USER_EMAIL"
        env:
          USER_NAME: ${{ secrets.USER_NAME }}
          USER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: Check for updates in repo
        run: git fetch --all

      - name: Merge concurrent changes
        run: |
          if echo $(git log origin/$GITHUB_REF_NAME -1 --pretty=%B) | grep -c "chore(release): bump "
          then
            git merge --no-edit --ff -m "Merge remote-tracking branch 'origin/$GITHUB_REF_NAME' [skip ci]"
            git push --follow-tags --force
          else
            echo "skip pull"
          fi
        shell: bash

  release:
    permissions: write-all
    outputs:
      VERSION: ${{ steps.get-version.outputs.VERSION }}
    needs: ["tests"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_FG_TOKEN }}
          persist-credentials: true

      - name: Git config identity
        run: |
          git config --global user.name "$USER_NAME"
          git config --global user.email "$USER_EMAIL"
        env:
          USER_NAME: ${{ secrets.USER_NAME }}
          USER_EMAIL: ${{ secrets.USER_EMAIL }}

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            .yarn/install-state.gz
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-

      - name: Install dependencies
        run: yarn install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64
          install: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for updates in repo
        run: git fetch --all

      - name: Merge concurrent changes
        run: |
          if echo $(git log origin/$GITHUB_REF_NAME -1 --pretty=%B) | grep -c "chore(release): bump "
          then
            git merge --no-edit --ff -m "Merge remote-tracking branch 'origin/$GITHUB_REF_NAME' [skip ci]"
            git push --follow-tags --force
          else
            echo "skip pull"
          fi
        shell: bash

      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2

      - name: bump and release
        run: yarn release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_FG_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          GITHUB_REF_NAME: ${{ env.GITHUB_REF_NAME }}

      - name: Retrieve version
        id: get-version
        run: echo "VERSION=$(git describe --tags --abbrev=0 | cut -c2-)" >> "$GITHUB_OUTPUT"

  deploy:
    needs: ["release"]
    name: Deploy ${{ needs.release.outputs.VERSION }} on recette
    uses: "./.github/workflows/_deploy.yml"
    with:
      environment: recette
      app_version: ${{ needs.release.outputs.VERSION }}
    secrets:
      DEPLOY_SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
      SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
      DEPLOY_USERNAME: ${{ secrets.DEPLOY_USERNAME }}
      DEPLOY_PASS: ${{ secrets.DEPLOY_PASS }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      VAULT_PWD: ${{ secrets.VAULT_PWD }}
