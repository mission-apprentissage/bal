name: Release version
on:
  push:
    branches: [main, next]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  tests:
    if: "!startsWith(github.event.head_commit.message, 'chore')"
    uses: "./.github/workflows/ci.yml"
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  release:
    permissions:
      contents: write
      issues: write
      packages: write
      pull-requests: write
    if: "!startsWith(github.event.head_commit.message, 'chore')"
    needs: ["tests"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      - uses: actions/cache@v3
        id: cache
        with:
          path: /tmp/docker_bal_root.tar
          fail-on-cache-miss: true
          key: docker-images-${{ hashFiles('**/yarn.lock') }}

      - name: Load Docker image from cache
        run: docker load < /tmp/docker_bal_root.tar
        shell: bash

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for updates in repo
        run: git fetch --all

      - name: Merge concurrent changes
        run: |
          if echo $(git log origin/$GITHUB_REF_NAME -1 --pretty=%B) | grep -c "chore(release): bump "
          then
            git merge --no-edit --ff -m "Merge remote-tracking branch 'origin/$GITHUB_REF_NAME' [skip ci]"
            git push --tags $GITHUB_REF_NAME --force
          else
            echo "skip pull"
          fi
        shell: bash
        env:
          USER_EMAIL: ${{ secrets.USER_EMAIL }}
          USER_NAME: ${{ secrets.USER_NAME }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: bump and release
        run: npx -y antoinebigard-semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          GITHUB_REF_NAME: ${{ env.GITHUB_REF_NAME }}
